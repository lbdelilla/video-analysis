from dotenv import load_dotenv
from nltk.tokenize import sent_tokenize
import re
import textstat
from youtube_transcript_api import YouTubeTranscriptApi
from youtube_transcript_api._errors import NoTranscriptFound, TranscriptsDisabled
from openai import OpenAI, APIError
import nltk
import os
nltk.download('punkt')
nltk.download('punkt_tab')

load_dotenv()


def get_video_metadata(video_id):
    try:
        # Obtener la transcripci√≥n formateada
        transcript = YouTubeTranscriptApi.get_transcript(
            video_id, languages=['es', 'en'])

        # Calcular la duraci√≥n total del video
        duration = transcript[-1]['start'] + transcript[-1]['duration']

        # Convertir a minutos (con decimales)
        duration_minutes = round(duration / 60, 2)

        return {
            "formatted_transcript": transcript,
            "duration_minutes": duration_minutes,
            "total_segments": len(transcript)
        }
    except Exception as e:
        raise RuntimeError(f"‚ùå Error al obtener los metadatos del video: {e}")


def get_transcription(video_id):
    try:
        if not re.match(r'^[a-zA-Z0-9_-]{11}$', video_id):
            raise ValueError("El ID del video no tiene un formato v√°lido.")

        # Obtener metadatos del video
        video_metadata = get_video_metadata(video_id)

        # Obtener el texto de la transcripci√≥n
        text = " ".join([t['text']
                        for t in video_metadata['formatted_transcript']])

        with open("class_transcript.txt", "w", encoding="utf-8") as file:
            file.write(f""" Transcripci√≥n:    {text}""")

        return {
            "text": text,
            "metadata": video_metadata
        }
    except NoTranscriptFound:
        raise RuntimeError(
            "‚ùå No se encontr√≥ una transcripci√≥n para este video.")
    except TranscriptsDisabled:
        raise RuntimeError(
            "‚ùå Las transcripciones est√°n deshabilitadas para este video.")
    except Exception as e:
        print(f"‚ùå Error al procesar video {video_id}: {e}")
        raise RuntimeError(f"‚ùå Error al obtener la transcripci√≥n: {e}")

# Funci√≥n para analizar claridad y pausas


def analyze_clarity(text):
    sentences = sent_tokenize(text)
    avg_sentence_length = sum(len(s.split())
                              for s in sentences) / len(sentences)
    filler_words = len(re.findall(
        r'\b(um|uh|eh|er|mmm|ah|umm|like|you know)\b', text, re.IGNORECASE))
    readability = textstat.flesch_reading_ease(text)
    interpretation = "F√°cil de leer" if readability > 60 else "Dif√≠cil de leer" if readability < 30 else "Moderado"
    return {
        "avg_sentence_length": avg_sentence_length,
        "filler_words_count": filler_words,
        "readability_score": readability,
        "readability_interpretation": interpretation
    }

# Funci√≥n para hacer un an√°lisis de IA sobre la calidad


def analyze_with_ai(text):
    client = OpenAI(
        api_key=os.getenv("OPENAI_API_KEY"),
        organization=os.getenv("OPENAI_API_ORGANIZATION"),
        project=os.getenv("OPENAI_API_PROJECT")
    )
    if not client.api_key:
        raise ValueError("No se encontr√≥ la clave API de OpenAI.")
    truncated = False
    if len(text) > 10000:
        text = text[:10000]
        truncated = True
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {
                "role": "system",
                "content": (
                    "Eres un experto en educaci√≥n en bootcamps de tecnolog√≠a, analizando la transcripci√≥n de una clase para detectar posibles problemas o descontentos de los alumnos en funci√≥n de su participaci√≥n, dudas, nivel de comprensi√≥n y din√°mica de la clase. "
                ),
            },
            {
                "role": "user",
                "content": f"""
                    Analiza la claridad, la estructura y la interacci√≥n en esta clase: {text}. 
                    
                    Formato de respuesta:

                    An√°lisis de la clase:
                    - Resumen general de la din√°mica.
                    - Nivel de participaci√≥n de los alumnos.
                    - Validaci√≥n de conocimientos durante la clase (¬øSe realizaron preguntas? ¬øLos alumnos respondieron correctamente?).
                    - Principales dificultades detectadas.
                    - Posibles se√±ales de descontento o desmotivaci√≥n.
                    - Uso de ejemplos para explicar los temas

                    Recomendaciones para mejorar:
                    - Sugerencias concretas para hacer la clase m√°s din√°mica y participativa.
                    - Estrategias para mejorar la comprensi√≥n de los alumnos.
                    - M√©todos para reforzar el contenido m√°s complejo.

                    Severidad del an√°lisis: 
                    - Excelente:  
                        - Alta participaci√≥n de los alumnos.  
                        - Respuestas correctas en la validaci√≥n del conocimiento.  
                        - Pocas o ninguna se√±al de descontento o desmotivaci√≥n.  
                        - Fluidez en la explicaci√≥n y estructura clara.  
                        - No se identifican problemas significativos en la din√°mica.  

                    - Buena:  
                        - Participaci√≥n aceptable, aunque algunos alumnos pueden no estar involucrados.  
                        - Validaci√≥n del conocimiento con respuestas mayormente correctas.  
                        - Algunas dificultades detectadas, pero no cr√≠ticas.  
                        - Puede haber √°reas de mejora en la din√°mica.  

                    - Regular:  
                        - Baja participaci√≥n en general.  
                        - Respuestas incorrectas o dudas frecuentes en validaciones de conocimiento.  
                        - Se√±ales de desmotivaci√≥n o descontento en algunos alumnos.  
                        - Problemas en la estructura o ritmo de la clase.  

                    - Cr√≠tica:  
                        - Muy baja o nula participaci√≥n de los alumnos.  
                        - Fallos constantes en la validaci√≥n del conocimiento.  
                        - M√∫ltiples se√±ales de descontento o frustraci√≥n entre los alumnos.  
                        - Explicaciones confusas o desorganizadas.  
                        - Necesita ajustes urgentes para mejorar la experiencia de aprendizaje.  


                    Contexto adicional: 
                    - Solo se analiza la parte te√≥rica de la clase, por lo que este an√°lisis no representa la experiencia completa de los alumnos.
                    - Es normal que los alumnos no comprendan todo en una sola clase, ya que manejan grandes vol√∫menes de informaci√≥n en poco tiempo.
                    - Los alumnos y profesores tienen acceso a material escrito antes de la clase, por lo que se debe considerar si el problema es falta de preparaci√≥n previa.
                    - El objetivo es proporcionar recomendaciones pr√°cticas para el docente y ayudar a priorizar la atenci√≥n a las clases que presenten m√°s problemas.
                    - La academia ofrece cursos de Full Stack, Data Science y Ciberseguridad. Las clases deben ser din√°micas y participativas, fomentando la validaci√≥n del conocimiento por parte de los alumnos. Los profesores solo graban la parte te√≥rica, mientras que la parte pr√°ctica se desarrolla con proyectos asignados.
                """
            }
        ]
    )

    analysis = response.choices[0].message.content
    return analysis + ("\n\n‚ö†Ô∏è Nota: La transcripci√≥n fue truncado a 10000 caracteres." if truncated else "")


# ID del video de YouTube para probar
video_id = "LA9zp7NgKnI"  # El video que estabas intentando analizar

try:
    # Obtener transcripci√≥n y metadatos
    transcript_data = get_transcription(video_id)
    transcript_text = transcript_data["text"]
    video_metadata = transcript_data["metadata"]

    # Mostrar los metadatos
    print("\nüìä Metadatos del video:")
    print(f"üìπ Duraci√≥n: {video_metadata['duration_minutes']} minutos")
    print(f"üìù Total de segmentos: {video_metadata['total_segments']}")

    # An√°lisis de claridad
    clarity_metrics = analyze_clarity(transcript_text)
    print("\nüìå An√°lisis de claridad:", clarity_metrics)

    # An√°lisis de IA
    ai_analysis = analyze_with_ai(transcript_text)
    print("\nü§ñ An√°lisis de IA:", ai_analysis)

except NoTranscriptFound:
    print("Error: No se encontr√≥ transcripci√≥n para este video.")
except APIError as e:
    print("Error en la API de OpenAI:", e)
except Exception as e:
    print("Error inesperado:", e)
